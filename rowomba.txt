@name rOwOmba(knife)
@persist [WalkRandomLookVec RandomLookVec]:vector
@persist [Base Knife]:entity DesiredAngle:angle Sounds:array
@persist [Go MoveSpeed Normal BatShitCrazy UltraDie HitTimer Timer DT]:number
@persist SavedTime
@model models/props_phx/games/chess/black_dama.mdl

Time = systime()

if(first()){
    runOnTick(1)
    runOnChat(1)
    
    Base = entity()
    Base:propFreeze(0)
    Base:setMass(50000)

    rangerFilter(Base)
    propSpawnUndo(0)

    Go = 1
    MoveSpeed = 1
    Normal = 1
    BatShitCrazy = 0
    
    #ifdef noCollideAll(entity,number)
        noCollideAll(entity(),0)
    #endif

    function void roomba(Dir:vector,Speed:number){
        if(Go){
            local Ranger = rangerOffset(100,Base:massCenter(),vec(0,0,-1))
            local Pos = Ranger:position()-Base:pos()+(Base:forward()*Go*Speed*5)+vec(0,0,5)
            Base:applyForce((Pos*10-Base:vel())*Base:mass())
        
            local DesiredAngle = ang(0,-angnorm(bearing(Base:pos(),ang(0),Dir)),0)
        
            local LevAngle = angnorm(-Base:angles()+DesiredAngle)*15-Base:angVel()*2
            local Leverage = Base:inertia():length()
            Base:applyAngForce(LevAngle*Leverage)
        }
    }
    
    function void knife(Pos:vector,Ang:angle){
        if(!holoEntity(1) & !Knife:isValid()){
            holoCreate(1)
            holoParent(1,Base)
            holoModel(1,"models/weapons/w_knife_t.mdl")
            holoScale(1,vec(2))
            holoPos(1,Pos)
            holoAng(1,Ang)
            
            Knife = propSpawn("models/hunter/plates/plate025.mdl",holoEntity(1):toWorld(vec(0)),ang(0,90,0),1)
            Knife:setAlpha(0)
            Knife:parentTo(holoEntity(1))
        }
        
        local KR = rangerOffset(80,Knife:massCenter(),Knife:forward())
        local KREnt = KR:entity()
        if(KREnt:type() == owner():type()){
            boomCustom(3,KREnt:pos(),inf(),100)
        }
    }

    timer("randomturn",1)

    Base:soundPlay("Hum",0,"npc/scanner/combat_scan_loop2.wav")
    Base:setMaterial("models/shiny")
    Base:setColor(vec(0))
}

if(chatClk(owner())){
    LS = owner():lastSaid()    
    if(!BatShitCrazy){
        if(LS:sub(1,10) == "!overdrive"){
            hideChat(1)
            MoveSpeed = 7.5
            BatShitCrazy = 1
            soundStop("Hum")
            Base:soundPlay("Speedy",0,"vagiland/schnitzelengine.wav")
        }
    }elseif(BatShitCrazy){
        BatShitCrazy = 0
        MoveSpeed = 1
        hideChat(1)
        Base:soundPlay("Hum",0,"npc/scanner/combat_scan_loop2.wav")
        soundStop("Speedy")
    }
}
elseif(clkName() == "randomturn"){
    timer("randomturn",randint(1000,8000))
    Base:soundPlay("Turn_sound",0,"ambient/levels/prison/radio_random" + randint(1,15) + ".wav")

    local Ang = randint(360)
    local Dir = vec(cos(Ang),sin(Ang),0)

    RandomLookVec = Base:pos() + Dir * 1000
}
elseif(tickClk()){
    roomba(RandomLookVec,MoveSpeed)

    local FRanger = rangerOffset(50,Base:massCenter(),Base:forward())
    local REnt = FRanger:entity()
    if(FRanger:hitWorld()){
        local Time = curtime()

        if(Time > HitTimer){
            RandomLookVec = Base:pos() + FRanger:hitNormal() * 1000
            HitTimer = Time + 2

            stoptimer("randomturn")
            timer("randomturn",randint(1000,5000))
        }
    } 
    elseif(REnt:type() == "prop_physics"){
        if(Normal){
            REnt:propBreak()
            Base:soundPlay("Nom",soundDuration("npc/headcrab/headbite.wav"),"npc/headcrab/headbite.wav")
        }
        elseif(BatShitCrazy){
            REnt:propBreak()
            Base:soundPlay("SuperNom",soundDuration("simulated_vehicles/horn_0.wav"),"simulated_vehicles/horn_0.wav")
        }           
    }
    
    if(BatShitCrazy){
        knife(Base:toWorld(vec(0,0,7)),Base:toWorld(ang(90,0,0)))
    }else{
        holoDelete(1)
        Knife:propBreak()
    }
        
    if(Base:isUnderWater()){
        selfDestruct()
    }
    
    if(Base:isFrozen()){
        Base:propFreeze(0)
    }
} 
